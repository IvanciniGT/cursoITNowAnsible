# Playbook: Contiene PLAYS

# Para ejecutar este paybook :
# $ ansible-playbook PATH_PLAYBOOK -i PATH_INVENTORY

- # Definición de UN PLAY

    # Entornos en los que voy a ejectar este playbook.
    hosts: all  # mipc localhost
                # Buena práctica poner aquí all. Por qué?
                #   Me interesa limitar esto cuando ejecute el playbook. Flexibilidad.
                # Valores posibles:
                #  - all: Todos los del inventario
                #  - nombre de host: localhost, mipc
                #  - rangos de maquinas: server1:server10
                #  - grupo: Los hosts (entornos) en los inventarios se pueden clasificar por grupos. Los que yo quiera.
                #           "produccion". "base_de_datos" "cliente1"
                #  - combinaciones de grupos:
                #       webservers:&produccion     Todos los webserves que SI sean de produccion 
                #       webservers:!produccion     Todos los webserves que NO sean de produccion 
    
    # Orden en el que deben elegirse los hosts (entornos) sobre los que ir ejecutando este PLAY
    order: inventory #                      Segun vengan en el inventario
                     # reversed_inventory:  Ordenados según inventario pero del ultimo al primero
                     # sorted:              Ordenados alfabeticamente
                     # reversed_sorted:     Ordenados alfabeticamente pero del ultimo al primero
                     # shuffle:             Como te venga bien
        
    # Indicamos a ansible si lo primero que hago al conectarme con un entorno es recuperar su FACTS:
    # Existe 2 tipos de facts, sobre los que este comando opera:
    #   Facts genericos que ofrece ansible: Información del HW y software del entorno al que me conecto
    #   Custom facts: Datos que yo puedo generar /almacenar en los entornos remotos
    gather_facts: False # Valor por defecto
    # Los facts genericos de ansible, que se recuperen, se podrán consultar a través de la variable: "ansible_facts"
    
    # Variables propias de este playbook:
    # Ansible tiene más de 20 sitios diferentes donde definir variables. ES UNA LOCURA !!!!!!!
    # Util... más para mi, que estoy montando el playbook... Datos que vaya a utilizar por ahí abajo con frecuencia
    #         O que sepa yo que es facil que cambien en un futuro... Me los pongo aqui, que los tengo más controlados
    # Este bloque, más que para definir variables, lo usamos para definir CONSTANTES
    vars:
        # Aqui pongo lo que me de la real gana.... con estructura de MAPA YAML
        variable1: valor 1
        variable2: 33
        variable3: True
        variable4:
            - item 1
            - item 2
            - item 3
        variable5: 
            dato1: valor1
            dato2: valor2
            dato3: valor3
            
        apache:
            rutaHome: /var/apache/home
            puertos:
                - 80
                - 443
            ssl:
                enabled: True
                privateKeyFile: /etc/apache/security/privateKey.pm
                certFile: /etc/apache/security/cert.pem

    # Definir TAREAS / ESTADOS
    # Agrupación a nivel conceptual. Estructurar mi fichero. A mi como ser humano PENSANTE me viene bien
    #pretasks:
    #    Dependencias
    #tasks:
    #    Creo usuarios
    #    Instalo el apache
    #posttasks:
    #    Abro puertos
    
    # Orden de ejecución de tareas en un playbook
    # 1º Se ejecutan los pretasks
    # 2º Se ejecutan UNA UNICA VEZ las tareas definidas en HANDLERS que hayan sido activadas
    # 3º Se ejecutan los tasks
    # 4º Se ejecutan UNA UNICA VEZ las tareas definidas en HANDLERS que hayan sido activadas
    # 5º Se ejecutan los posttasks
    # 6º Se ejecutan UNA UNICA VEZ las tareas definidas en HANDLERS que hayan sido activadas
    # Hay una palabra (QUE NO SE RECOMIENDA USAR) que permite en medio de un bloque PRE, TASKS o POST forzar la ejecución 
    # de los handlers que hayan sido notificados hasta ese momento flush_handlers
    
    tasks:
        - # Un item para cada tarea. Y para cada una, tenemos que definir:
            name: Tarea -1. Recuperar facts... pero pocos
            # Decir que módulo ejecuta esta tarea:
            setup:
                gather_subset:
                  - '!all'
            tags:
            - instalacion

        - # Un item para cada tarea. Y para cada una, tenemos que definir:
            name: Tarea 0. Mostrar lo facts de la maquina contra la que estoy trabajando
            # Decir que módulo ejecuta esta tarea:
            debug:
                var: ansible_facts 
            tags:
            - test


        - # Un item para cada tarea. Y para cada una, tenemos que definir:
            name: Tarea 1
            # Decir que módulo ejecuta esta tarea:
            debug:
                msg: Hola, estamos comenzando con Ansible
            tags:
            - test

        -   name: Tarea 2
            # Decir que módulo ejecuta esta tarea:
            shell: |
                    if [ -d /tmp/prueba ]; then
                        exit 0
                    else
                        mkdir /tmp/prueba && exit 2 || exit 1
                    fi
            notify: EVENTO_Y
            register: salida_tarea_2 # Me crea una variable que almacena la salida del MODULO
                # Cuando registro la salida de un módulo, con independencia de lo que devuelva el modulo,
                # Siempre puedo preguntar:
                #    salida_tarea_2 is failed
                #    salida_tarea_2 is succeded
                #    salida_tarea_2 is changed
                #    salida_tarea_2 is skipped
            changed_when: salida_tarea_2.rc == 2 # Expresión lógica
            failed_when: salida_tarea_2.rc == 1  # Expresión lógica
            #ignore_errors: True # Expresión lógica
        
        # Condicional
        -   name: Mostrar datos de la tarea 2
            debug:
                var: salida_tarea_2.rc
            when: salida_tarea_2.rc == 2 # Expresión lógica

        -   meta: flush_handlers    # Fuerza que los handles notificados hasta el momento se ejecuten en este punto
                                    # No es buena práctica. Lo usaré si no me queda otra
        -   debug:
                msg: Adios, por hoy acabamos !!!!!
            name: Tarea 3             
            notify: Otra tarea 1  # ESTO NO SE USA !!!!!!
                    # Cuando se ejecutaría esta tarea? Al final de todos los tasks y solo una vez
                    # Siempre? NO. Solo si esta tarea provoca CAMBIO: change
        # Bucles
        -   name: Ejecuto una tarea en bucle
            shell:
                cmd: |
                    # Interpolación de variables en textos
                    echo {{ item | upper }}
                    {{ item }}
            register: bucle
            loop: "{{ comandos }}"
            # Antes se hacia con funciones with_X
            # Para cambiar de sintaxis y ver todos los bucles que podemos montar con loop:
            # https://docs.ansible.com/ansible/latest/user_guide/playbooks_loops.html
            vars: 
                comandos: 
                    - echo HOLA
                    - echo Adios

        -   name: Mostrar ejecucion bucle
            debug:
                var: bucle
    
    # Otras tareas, asociadas a EVENTOS
    # Las tareas definidas en pretasks, tasks y posttasks siempre se ejecutan (a priori).
    # Las que pongamos aquí SOLO cuando hayan sido ACTIVADAS por una tarea de las anteriores
    # Los handlers se ejecutan despues de habese ejecutado todas las tareas de un bloque de tareas: pre, tasks, post
    handlers:
        -   name: Otra tarea 1
            debug:
                msg: Adios, por hoy acabamos !!!!!
            listen: # Una o la otra
                -   EVENTO_X
                -   EVENTO_Y
            
        -   name: Otra tarea 2
            debug:
                msg: Adios, por hoy acabamos !!!!!
            listen: EVENTO_X
            
    
    
    

